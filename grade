
#***************************************
#***************************************
#
# WARNING:
#    DO NOT MODIFY THIS FILE IN ANY WAY
#
#***************************************
#***************************************


import statistics
#import lab01
from lab01 import *
import random

from multiprocessing import set_forkserver_preload
import unittest
import io
import unittest.mock

from colorama import Fore
from colorama import Style
from colorama import init
init(autoreset = True)

class testcases(unittest.TestCase):
    def setUp(self):
        pass
    def tearDown(self):
        pass

    @unittest.mock.patch('sys.stdout', new_callable=io.StringIO)
    def assert_stdoutF1311(self, expected_output, mock_stdout):
        F1311()
        self.assertEqual(mock_stdout.getvalue(), expected_output)

    def test_F1311(self):
        # try:
        self.assert_stdoutF1311("8\n")
        #     passed=1
        # except:
        #     passed=0
        # finally:
        #     if (passed == 1):
        #         #print(f"F1311: '\x1b[6;30;42m Passed \x1b[0m'")
        #         print(f"F1311: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1311: {Fore.RED}failed{Style.RESET_ALL}")


    def test_F1321(self):
        # try:
        self.assertTrue(F1321(10,5), "True")
        self.assertTrue(F1321(22,11), "True")
        self.assertFalse(F1321(10,500), "False")
        self.assertFalse(F1321(-2,4), "False")
            # passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1321: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
                # print(f"F1321: {Fore.RED}failed{Style.RESET_ALL}")

    @unittest.mock.patch('sys.stdout', new_callable=io.StringIO)
    def assert_stdoutF1322(self, expected_output, mock_stdout):
        F1322()
        self.assertEqual(mock_stdout.getvalue(), expected_output)


    def test_F1322(self):
        # try:    
        self.assert_stdoutF1322("False\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\n")
        self.assert_stdoutF1322("False\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n")

        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1322: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1322: {Fore.RED}failed{Style.RESET_ALL}")
 
 
    @unittest.mock.patch('sys.stdout', new_callable=io.StringIO)
    def assert_stdoutF1324(self, expected_output, mock_stdout):
        F1341()
        self.assertEqual(mock_stdout.getvalue(), expected_output)
    def test_F1341(self):
        # try:
        self.assert_stdoutF1324("2\n2\n12\n")
        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1341: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1341: {Fore.RED}failed{Style.RESET_ALL}")
 
 
 
    def test_F1411(self):
        # try:
        self.assertEqual(F1411(95).lower(), "good")
        self.assertEqual(F1411(86).lower(), "pass")
        self.assertEqual(F1411(60).lower(), "pass")
        self.assertEqual(F1411(59).lower(), "fail")
        self.assertEqual(F1411(12).lower(), "fail")
        self.assertEqual(F1411(90).lower(), "good")
        self.assertEqual(F1411(89).lower(), "pass")
        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1411: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1411: {Fore.RED}failed{Style.RESET_ALL}")
 
 
 
    @unittest.mock.patch('sys.stdout', new_callable=io.StringIO)
    def assert_stdoutF1412(self, expected_output, mock_stdout):
        F1412(11)
        self.assertEqual(mock_stdout.getvalue(), expected_output)
    def test_F1412(self):
        # try:
        self.assert_stdoutF1412("*\n**\n***\n****\n*****\n******\n*******\n********\n*********\n**********\n***********\n")
        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1412: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1412: {Fore.RED}failed{Style.RESET_ALL}")

    @unittest.mock.patch('sys.stdout', new_callable=io.StringIO)
    def assert_stdoutF1413(self, expected_output, mock_stdout):
        F1413(11)
        self.assertEqual(mock_stdout.getvalue(), expected_output)
    def test_F1413(self):
        # try:
        self.assert_stdoutF1413("*\n**\n***\n****\n*****\n******\n*******\n********\n*********\n**********\n***********\n")
        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1413: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1413: {Fore.RED}failed{Style.RESET_ALL}")
    
    

    def test_F1414(self):
        # try:
        self.assertEqual(F1414(), 14)
        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1414: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1414: {Fore.RED}failed{Style.RESET_ALL}")




    def test_F1511(self):
        # try:
        self.assertEqual(F1511(2,5), 49)
        self.assertEqual(F1511(11,13), 576)
        self.assertEqual(F1511(10000,433220), 196443968400)
        self.assertEqual(F1511(-101,999), 806404)
        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1511: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1511: {Fore.RED}failed{Style.RESET_ALL}")


    def test_F1512(self):
        # try:    
        self.assertEqual(F1512(32), 89.6)
        self.assertEqual(F1512(104), 219.2)
        self.assertEqual(F1512(-200), -328.0)
        self.assertEqual(F1512(-370), -634.0)
        self.assertEqual(F1512(1500), 2732.0)
        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1512: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1512: {Fore.RED}failed{Style.RESET_ALL}")
    
    def test_F1513(self):
        # try:
        self.assertEqual(F1513(3),6)
        self.assertEqual(F1513(5),120)
        self.assertEqual(F1513(0),1)
        self.assertEqual(F1513(1),1)
        self.assertEqual(F1513(15),1307674368000)
        self.assertEqual(F1513(50),30414093201713378043612608166064768844377641568960512000000000000)
        self.assertEqual(F1513(100),93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000)
        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1513: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1513: {Fore.RED}failed{Style.RESET_ALL}")
   
    
    def test_F1514(self):
        # try:
        self.assertEqual(F1514(1,2,3),2)
        self.assertEqual(F1514(4,8,18),10)
        self.assertEqual(F1514(4,5,9),6)
        self.assertEqual(F1514(-12,-1,19),2)
        self.assertEqual(F1514(-1,-1,5), 1)
        self.assertEqual(F1514(-10,0,10), 0)
        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1514: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1514: {Fore.RED}failed{Style.RESET_ALL}")





    @unittest.mock.patch('sys.stdout', new_callable=io.StringIO)
    def assert_stdoutq161(self, expected_output, mock_stdout):
        F1612()
        self.assertEqual(mock_stdout.getvalue(), expected_output)

    def test_F1612(self):
        # try:
        self.assert_stdoutq161('********\nComp 200\n********\n')
        #     passed = 1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1612: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1612: {Fore.RED}failed{Style.RESET_ALL}")
    
    
    
    
    @unittest.mock.patch('sys.stdout', new_callable=io.StringIO)
    def assert_stdoutF1611(self, expected_output, mock_stdout):
        F1611()
        self.assertEqual(mock_stdout.getvalue(), expected_output)
    def testF1611(self):
        # try:
        self.assert_stdoutF1611("Hello\nWorld\n")
        #     passed = 1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1611: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1611: {Fore.RED}failed{Style.RESET_ALL}")


    @unittest.mock.patch('sys.stdout', new_callable=io.StringIO)
    def assert_stdoutF1613(self, expected_output, mock_stdout):
        F1613()
        self.assertEqual(mock_stdout.getvalue(), expected_output)

    def test_F1613(self):
        # try:
        self.assert_stdoutF1613("Values of a and b are:  10 3.1415\n")
        #     passed=1
        # except:
        #     passed = 0
        # finally:
        #     if (passed==1):
        #         print(f"F1613: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1613: {Fore.RED}failed{Style.RESET_ALL}")



    @unittest.mock.patch('sys.stdout', new_callable=io.StringIO)
    def assert_stdoutF1614(self, expected_output, mock_stdout):
        F1614(4.321132454325, 0.71612342314)
        self.assertEqual(mock_stdout.getvalue(), expected_output)
    def test_F1614(self):
        # try:
        self.assert_stdoutF1614("sum:4.321 -- avg:0.716\n")
        # passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1614: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1614: {Fore.RED}failed{Style.RESET_ALL}")
                

                

    def testF1622(self):
        # try:
        self.assertEqual(F1622(),110435)
        #     passed =1
        # except:
        #     passed =0
        # finally:
        #     if (passed==1):
        #         print(f"F1622: {Fore.LIGHTGREEN_EX}passed{Style.RESET_ALL}")
        #     else:
        #         print(f"F1622: {Fore.RED}failed{Style.RESET_ALL}")


if __name__ == '__main__':
     unittest.main()
     
     
